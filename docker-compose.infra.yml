services:
  mysql:
    platform: linux/amd64
    restart: always
    image: mysql:8.0
    ports:
      - '${DB_PORT}:${DB_PORT}'
    volumes:
      - ./docker-volumes/mysql/init:/docker-entrypoint-initdb.d
      - ./docker-volumes/mysql/data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_DATABASE: '${DB_NAME}'
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
    networks:
      - infra

  redis:
    image: redis:latest
    restart: always
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - ./docker-volumes/redis:/data
    networks:
      - infra

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
      ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL: WARN
    volumes:
      - ./docker-volumes/zookeeper:/var/lib/zookeeper
    networks:
      - infra

  broker:
    image: confluentinc/cp-kafka:7.9.0
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093,PLAINTEXT_INTERNAL://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-volumes/kafka:/var/lib/kafka/data
    networks:
      - infra

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    restart: always
    depends_on:
      - broker
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
    networks:
      - infra

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    restart: always
    command: ['--config=/etc/otel-collector-config.yml']
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - '4317:4317' # Puerto para recibir datos de NestJS (OTLP gRPC)
      - '4318:4318' # Puerto OTLP HTTP
    depends_on:
      - loki
      - tempo
      - prometheus
    networks:
      - monitoring

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: always
    volumes:
      - ./docker-volumes/tempo:/var/lib/tempo
      - ./tempo.yml:/etc/tempo.yml
    command: ['-config.file=/etc/tempo.yml']
    ports:
      - '3200:3200' # Tempo HTTP API
      - '14317:4317' # OTLP gRPC
      - '14318:4318' # OTLP HTTP
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v3.2.1
    container_name: prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
    volumes:
      - ./docker-volumes/prometheus:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - monitoring

  loki:
    image: grafana/loki:3
    user: '1000:1000' # ðŸ‘ˆ Asegura que Loki tenga permisos
    container_name: loki
    restart: always
    volumes:
      - ./docker-volumes/loki:/data/loki
      - ./loki.yml:/mnt/config/loki.yml
    command: -config.expand-env=true -config.file=/mnt/config/loki.yml
    ports:
      - '3100:3100'
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - '3001:3000'
    volumes:
      - ./docker-volumes/grafana:/var/lib/grafana
    depends_on:
      - loki
      - tempo
      - prometheus
    networks:
      - monitoring
networks:
  infra:
  monitoring:
    driver: bridge
